using System.Collections.Generic;
using System.Text;

namespace Lib.AssetsPlugin
{
    public abstract class ContentBuilder
    {
        public const string Notice = "//This is AUTOGENERATED FILE by bb-assets-generator-plugin. DO NOT EDIT!!!\n";
        public const string ExportConst = "export const ";

        protected StringBuilder _content;

        public void Build(IDictionary<string, object> assets)
        {
            _content = new StringBuilder();
            _content.Append(GetHeader());
            _content.Append('\n');
            RecursiveBuild(assets, 0);
        }

        public string Content => _content.ToString();

        public abstract string GetHeader();

        public virtual bool ShouldSkip(string value) => false;

        public abstract void AddPropertyValue(string value);

        public string GetPropertyLineEnd(int depth)
        {
            return depth == 0 ? ";\n" : ",\n";
        }

        protected string GetPropertyNameValueSeparator(int depth)
        {
            return depth == 0 ? " = " : ": ";
        }

        protected string SanitizePropertyName(string key)
        {
            if (key == "") return "";
            if (key[0] >= '0' && key[0] <= '9') return "_" + key;
            return key;
        }

        void RecursiveBuild(IDictionary<string, object> rootObject, int depth)
        {
            foreach (var propertyPair in rootObject)
            {
                var propertyName = propertyPair.Key;
                var propertyValue = propertyPair.Value;
                if (propertyValue is string)
                {
                    if (ShouldSkip((string)propertyValue)) continue;
                }
                if (depth == 0)
                {
                    AddExport();
                }
                else
                {
                    AddIdent(depth);
                }

                if (propertyValue is IDictionary<string, object> dictionary)
                {
                    AddObjectStart(propertyName, depth);
                    RecursiveBuild(dictionary, depth + 1);
                    AddObjectEnd(depth);
                }
                else
                {
                    _content.Append(SanitizePropertyName(propertyName));
                    _content.Append(GetPropertyNameValueSeparator(depth));
                    AddPropertyValue((string)propertyValue);
                    _content.Append(GetPropertyLineEnd(depth));
                }
            }
        }

        void AddObjectStart(string name, int depth)
        {
            _content.Append(SanitizePropertyName(name));
            _content.Append(GetPropertyNameValueSeparator(depth));
            _content.Append("{\n");
        }

        void AddObjectEnd(int depth)
        {
            AddIdent(depth);
            _content.Append('}');
            _content.Append(depth == 0 ? ';' : ',');
            _content.Append('\n');
        }

        void AddIdent(int depth)
        {
            _content.Append(' ', depth * 4);
        }

        void AddExport()
        {
            _content.Append(ExportConst);
        }
    }
}
